
In a party of N people, only one person is known to everyone. Such a person may be present in the party, 
if yes, (s)he doesn’t know anyone in the party. We can only ask questions like “does A know B? “. 
Find the stranger (celebrity) in minimum number of questions.
Using Stack:

The graph construction takes O(N2) time, it is similar to brute force search. In case of recursion, 
we reduce the problem instance by not more than one, and also combine step may examine M-1 persons (M – instance size).

We have following observation based on elimination technique (Refer Polya’s How to Solve It book).

If A knows B, then A can’t be celebrity. Discard A, and B may be celebrity.
If A doesn’t know B, then B can’t be celebrity. Discard B, and A may be celebrity.
Repeat above two steps till we left with only one person.
Ensure the remained person is celebrity. (Why do we need this step?)
We can use stack to verity celebrity.

Push all the celebrities into a stack.
Pop off top two persons from the stack, discard one person based on return status of HaveAcquaintance(A, B).
Push the remained person onto stack.
Repeat step 2 and 3 until only one person remains in the stack.
Check the remained person in stack doesn’t have acquaintance with anyone else.

int celebrity(int n) {
	stack<int> s;
	for (int i=0; i<n; ++i) {
		s.push(i);
	}

	int a = s.top();
	s.pop();
	int b = s.top();
	s.pop();
	while (s.size() != 1){
		if(know(a,b)) {
			a = s.top();
			s.pop();
		} else {
			b = s.top();
			s.pop();
		}
	}

	int c = s.top();
	s.pop();
	if (know(c,a)) c = a;
	if (know(c,b)) c = b;
	for (int i=0; i<n; ++i) {
		if (i==c) continue;
		if (know(c,i)) return -1;
		if (!know(i,c)) return -1;
	}
	return c;
}

//BELOW SOLUTION EVEN BETTER, it doesn't use additional space
int searchCelebrity(int * personIDArr, int n)
	{
		if(n < 2)	return -1;
 
		//Initialize celebrity with first person
		int celebrityIDIndex = 0;
		int curCheckPerson = 1;
 
		while(curCheckPerson < n)
		{
			if(HaveAcquiantance(personIDArr[celebrityIDIndex], personIDArr[curCheckPerson])) {
				//If celebrityIDIndex person knows curCheckPerson, celebrityIDIndex
				//person is not the celebrity. Remove it and reset with curCheckPerson
				celebrityIDIndex = curCheckPerson;
			}
 
			++curCheckPerson;
		}
 
		//celebrityIDIndex maybe the celebrity, let's check whether it knows anyone.
		for(int i = 0; i < n; i++)
		{
			if(i == celebrityIDIndex) continue;
			if(HaveAcquiantance(personIDArr[celebrityIDIndex], personIDArr[i]))
				return -1; //he knows someone, so there is no such celebrity.
		}
 
		//celebrityIDIndex person indeed does not know anyone, so he is the celebrity.
		return celebrityIDIndex;
	}
	
	
	
