Count Lead Changes
Leave a reply
Given an array of positive integers that represents possible points a team could score in an individual play. Now there are two teams play against each other. Their final scores are S and S’. How would you compute the maximum number of times the team that leads could have changed?
For example, if S=10 and S’=6. The lead could have changed 4 times:
Team 1 scores 2, then Team 2 scores 3 (lead change);
Team 1 scores 2 (lead change), Team 2 score 0 (no lead change);
Team 1 scores 0, Team 2 scores 3 (lead change);
Team 1 scores 3, Team 2 scores 0 (lead change);
Team 1 scores 3, Team 2 scores 0 (no lead change).

class CountLeadChanges{
public:
    int count(vector<int> scores, int S1, int S2){
        int dp[S1+1][S2+1];
        for(int i = 0; i <= S1; i ++)
            for(int j = 0; j <= S2; j ++)
                dp[i][j] = -1;
        dp[0][0] = 0;
        for(int i = 0; i <= S1; i ++){
            for(int j = 0; j <= S2; j ++){
                for(int k = 0; k < scores.size(); k ++){
                    int t1 = S1 - scores[k];
                    int t2 = S2 - scores[k];
                    if(t1 >= 0){
                        int last = dp[t1][j];
                         
                        if(last != -1 && last > dp[i][j])
                            dp[i][j] = last;
                        if(t1 <= j && i > j && last >= dp[i][j]){
                            dp[i][j] = last + 1;
                        }
                    }
                    if(t2 >= 0){
                        int last = dp[i][t2];
                         
                        if(last != -1 && last > dp[i][j])
                            dp[i][j] = last;
                        if(t2 <= j && i > j && last >= dp[i][j]){
                            dp[i][j] = last + 1;
                        }
                    }
                }
            }
        }
        return dp[S1][S2];
    }
};
