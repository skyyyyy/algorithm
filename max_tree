construct max tree by using segment tree and wonderful stack trick

Given an integer array with no duplicates. A max tree building on this array is defined as follow:

The root is the maximum number in the array
The left subtree and right subtree are the max trees of the subarray divided by the root number.
Construct the max tree by the given array.
Example
Given [2, 5, 6, 0, 3, 1], the max tree is

              6

            /    \

         5       3

       /        /   \

     2        0     1
 
 
 /**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
solution 1: use stack

TreeNode* maxTree(vector<int> A) {
        // write your code here
        int n = A.size();
        TreeNode *res = NULL;
        stack<TreeNode*> s;
        for (int i=0;i<n;++i){
            TreeNode* last = NULL;
            while(!s.empty() && s.top()->val<A[i]){
                last = s.top();
                s.pop();
            }
            TreeNode* current = new TreeNode(A[i]);
            current->left = last;
            if(s.empty()) res = current;
            else s.top()->right = current;
            
            s.push(current);
        }
        return res;
    }
    
    
    
    
solution2: use segment tree

class Solution {
public:
    /**
     * @param A: Given an integer array with no duplicates.
     * @return: The root of max tree.
     */
    TreeNode* maxTree(vector<int> A) {
        // write your code here
     int n = A.size();
     StNode* root = constructST(A,0,n-1);
     return maxTree(A,0,n-1, root);
    }
private:
   class StNode{
       public:
       int val;
       int index;
       int s,e;
       StNode *left, *right;
       StNode(int val,int index){
           this->val = val;
           this->index = index;
           this->left = this->right = NULL;
       }
   };
   StNode* constructST(vector<int> &A, int s, int e){
       StNode* root = NULL;
       if(s==e){
           root = new StNode(A[s],s);
        }else{ 
           int m = s+(e-s)/2;
           StNode* L=constructST(A,s,m);
           StNode* R=constructST(A,m+1,e);
           if(L->val>=R->val) root = new StNode(L->val,L->index);
           else root = new StNode(R->val,R->index);
           root->left = L;
           root->right = R;
       }
       root->s=s;
       root->e=e;
       return root;
   }
   StNode* getMax(StNode* root, int qs, int qe){
       if(qs<=root->s && qe>=root->e) return root;
       else if(qs>root->e || qe<root->s) return NULL;
       else{
           StNode* L=getMax(root->left,qs,qe);
           StNode* R=getMax(root->right, qs,qe);
           if(!L) return R;
           else if(!R) return L;
           else return L->val>=R->val?L:R;
       }
   }
   TreeNode* maxTree(vector<int> &A, int start, int end, StNode* st){
       if(start == end ) return new TreeNode(A[start]);
       else if(start > end) return NULL;
       
       /*
       int pos = start;
       for(int i=start+1;i<=end;++i){
           if(A[i]>A[pos]){
               pos = i;
           }
       }
       TreeNode* root = new TreeNode(A[pos]);
       */
       StNode* p = getMax(st,start,end);
       TreeNode* root = new TreeNode(p->val);
       root->left = maxTree(A,start,p->index-1, st);
       root->right = maxTree(A,p->index+1,end, st);
       return root;
   }
};
